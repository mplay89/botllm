import time
from aiogram import F, Router
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from config.settings import settings
from data.admin_store import add_admin, is_admin, list_admins, remove_admin
from data.config_store import get_text_model_name, set_text_model
from data.model_store import get_available_models
from keyboards.inline import get_model_selection_keyboard
from keyboards.reply import get_admin_management_keyboard, get_admin_menu
from utils.logging_setup import get_logger

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–µ—à—ñ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
from data import cache

router = Router()
logger = get_logger(__name__)


class AdminFilter(Filter):
    """–§—ñ–ª—å—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º."""

    async def __call__(self, message: Message) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        return await is_admin(message.from_user.id)


class OwnerFilter(Filter):
    """–§—ñ–ª—å—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–ª–∞—Å–Ω–∏–∫–æ–º."""

    async def __call__(self, message: Message) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–ª–∞—Å–Ω–∏–∫–æ–º –±–æ—Ç–∞."""
        return message.from_user.id == settings.OWNER_ID


class AdminActions(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è FSM –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""

    waiting_for_admin_to_add = State()
    waiting_for_admin_to_remove = State()


# --- –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –°–ò–°–¢–ï–ú–£ (–¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞) ---

@router.message(OwnerFilter(), Command("cache_info"))
async def cache_info_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–µ—à—É."""
    logger.info("–í–ª–∞—Å–Ω–∏–∫ (ID: %d) –∑–∞–ø—Ä–æ—Å–∏–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–µ—à.", message.from_user.id)

    now = time.time()
    info_parts = ["<b>‚ÑπÔ∏è –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–µ—à—É:</b>"]

    # 1. –ö–µ—à –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    info_parts.append("\n<b>–ö–µ—à –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (settings_cache):</b>")
    if cache.settings_cache:
        for key, data in cache.settings_cache.items():
            ttl = round(data['timestamp'] + cache.SETTINGS_CACHE_TTL - now)
            info_parts.append(f"- <code>{key}</code>: {data['value']} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å {ttl} —Å–µ–∫)")
    else:
        info_parts.append("- <em>–ü–æ—Ä–æ–∂–Ω—å–æ</em>")

    # 2. –ö–µ—à –º–æ–¥–µ–ª–µ–π
    info_parts.append("\n<b>–ö–µ—à –º–æ–¥–µ–ª–µ–π (models_cache):</b>")
    if cache.models_cache:
        ttl = round(cache.models_cache['timestamp'] + cache.MODELS_CACHE_TTL - now)
        models = cache.models_cache['models']
        info_parts.append(f"- <code>models</code>: {models} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å {ttl} —Å–µ–∫)")
    else:
        info_parts.append("- <em>–ü–æ—Ä–æ–∂–Ω—å–æ</em>")

    # 3. –ö–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    info_parts.append("\n<b>–ö–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (user_cache):</b>")
    if cache.user_cache:
        for user_id, user_data in cache.user_cache.items():
            info_parts.append(f"\n- <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <code>{user_id}</code>:</b>")
            for key, data in user_data.items():
                ttl = round(data['timestamp'] + cache.USER_CACHE_TTL - now)
                info_parts.append(f"  - <code>{key}</code>: {data['value']} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å {ttl} —Å–µ–∫)")
    else:
        info_parts.append("- <em>–ü–æ—Ä–æ–∂–Ω—å–æ</em>")

    await message.answer("\n".join(info_parts))


# --- –ù–ê–í–Ü–ì–ê–¶–Ü–Ø –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–Ü ---


@router.message(AdminFilter(), F.text == "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å'."""
    logger.info("–ê–¥–º—ñ–Ω (ID: %d) —É–≤—ñ–π—à–æ–≤ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.", message.from_user.id)
    is_owner = message.from_user.id == settings.OWNER_ID
    await message.answer("–í–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.", reply_markup=get_admin_menu(is_owner))


@router.message(AdminFilter(), F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")
async def back_to_admin_panel_handler(message: Message, state: FSMContext) -> None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    logger.info(
        "–ê–¥–º—ñ–Ω (ID: %d) –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
        message.from_user.id,
    )
    await state.clear()  # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω FSM
    is_owner = message.from_user.id == settings.OWNER_ID
    await message.answer("–í–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.", reply_markup=get_admin_menu(is_owner))


# --- –ö–ï–†–£–í–ê–ù–ù–Ø –ú–û–î–ï–õ–õ–Æ AI ---


@router.message(AdminFilter(), F.text == "ü§ñ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ–ª—å AI")
async def change_model_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ AI."""
    logger.info("–ê–¥–º—ñ–Ω (ID: %d) —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∑–º—ñ–Ω—É –º–æ–¥–µ–ª—ñ AI.", message.from_user.id)

    current_model = await get_text_model_name()
    available_models = await get_available_models()

    if not available_models:
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    current_model_short = current_model.replace("models/", "")

    await message.answer(
        f"–ü–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å: <b>{current_model_short}</b>\n\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –º–æ–¥–µ–ª—å:",
        reply_markup=get_model_selection_keyboard(available_models, current_model),
    )


@router.callback_query(F.data.startswith("set_model:"))
async def set_model_callback_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –Ω–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏."""
    model_name = callback.data.split(":")[1]

    if await set_text_model(model_name):
        logger.info(
            "–ê–¥–º—ñ–Ω (ID: %d) –∑–º—ñ–Ω–∏–≤ –º–æ–¥–µ–ª—å AI –Ω–∞ %s.",
            callback.from_user.id,
            model_name,
        )

        available_models = await get_available_models()
        current_model_short = model_name.replace("models/", "")

        await callback.message.edit_text(
            f"‚úÖ –ú–æ–¥–µ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <b>{current_model_short}</b>\n\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –º–æ–¥–µ–ª—å:",
            reply_markup=get_model_selection_keyboard(
                available_models, model_name
            ),
        )
        await callback.answer("–ó–±–µ—Ä–µ–∂–µ–Ω–æ!")
    else:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ–ª—å.", show_alert=True)


# --- –ö–ï–†–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù–ê–ú–ò (–¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞) ---


@router.message(OwnerFilter(), F.text == "üë• –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤")
async def manage_admins_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º–∏."""
    if message.from_user.id != settings.OWNER_ID:
        return
    logger.info(
        "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) —É–≤—ñ–π—à–æ–≤ –≤ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º–∏.", message.from_user.id
    )
    await message.answer(
        "–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:",
        reply_markup=get_admin_management_keyboard(),
    )


@router.message(OwnerFilter(), F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞")
async def add_admin_start_handler(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞."""
    if message.from_user.id != settings.OWNER_ID:
        return
    logger.info(
        "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞.", message.from_user.id
    )
    await state.set_state(AdminActions.waiting_for_admin_to_add)
    await message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –≤—ñ–¥ –Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å /cancel."
    )


@router.message(OwnerFilter(), F.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞")
async def remove_admin_start_handler(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞."""
    if message.from_user.id != settings.OWNER_ID:
        return
    logger.info(
        "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞.", message.from_user.id
    )
    await state.set_state(AdminActions.waiting_for_admin_to_remove)
    await message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏.\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å /cancel."
    )


@router.message(OwnerFilter(), F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤")
async def list_admins_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ ID –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ–≤."""
    if message.from_user.id != settings.OWNER_ID:
        return
    logger.info("–í–ª–∞—Å–Ω–∏–∫ (ID: %d) –∑–∞–ø—Ä–æ—Å–∏–≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤.", message.from_user.id)
    admins = await list_admins()
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    admin_list_str = "\n".join(
        [f"‚Ä¢ <code>{admin['user_id']}</code> ({admin['role']})" for admin in admins]
    )
    await message.answer(f"<b>–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:</b>\n{admin_list_str}")


# --- –û–ë–†–û–ë–ù–ò–ö–ò –°–¢–ê–ù–Ü–í FSM ---


@router.message(Command("cancel"))
async def cancel_fsm_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –≤–∏—Ö–æ–¥—É –∑—ñ —Å—Ç–∞–Ω—É FSM."""
    current_state = await state.get_state()
    if current_state is None:
        return

    logger.info(
        "–ê–¥–º—ñ–Ω (ID: %d) —Å–∫–∞—Å—É–≤–∞–≤ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é (—Å—Ç–∞–Ω: %s).",
        message.from_user.id,
        current_state,
    )
    await state.clear()
    is_owner = message.from_user.id == settings.OWNER_ID
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_admin_menu(is_owner))


@router.message(AdminActions.waiting_for_admin_to_add)
async def process_add_admin_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î ID –∞–±–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞."""
    user_id_to_add = None
    owner_id = message.from_user.id

    if message.forward_from:
        user_id_to_add = message.forward_from.id
    elif message.text and message.text.isdigit():
        user_id_to_add = int(message.text)
    else:
        logger.warning(
            "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) –Ω–∞–¥–∞–≤ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞.", owner_id
        )
        await message.answer(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        )
        return

    if await add_admin(user_id_to_add):
        logger.info(
            "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) –¥–æ–¥–∞–≤ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞ (ID: %d).",
            owner_id,
            user_id_to_add,
        )
        await message.answer(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID <code>{user_id_to_add}</code> –Ω–∞–¥–∞–Ω–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞."
        )
    else:
        logger.info(
            "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) —Å–ø—Ä–æ–±—É–≤–∞–≤ –¥–æ–¥–∞—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∞–¥–º—ñ–Ω–∞ (ID: %d).",
            owner_id,
            user_id_to_add,
        )
        await message.answer(
            f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID <code>{user_id_to_add}</code> –≤–∂–µ —î –∞–¥–º—ñ–Ω–æ–º –∞–±–æ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º."
        )

    await state.clear()


@router.message(AdminActions.waiting_for_admin_to_remove)
async def process_remove_admin_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞."""
    owner_id = message.from_user.id
    if not message.text or not message.text.isdigit():
        logger.warning(
            "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) –Ω–∞–¥–∞–≤ –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞.", owner_id
        )
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    user_id_to_remove = int(message.text)

    if await remove_admin(user_id_to_remove):
        logger.info(
            "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) –≤–∏–¥–∞–ª–∏–≤ –∞–¥–º—ñ–Ω–∞ (ID: %d).",
            owner_id,
            user_id_to_remove,
        )
        await message.answer(
            f"‚úÖ –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <code>{user_id_to_remove}</code> –∑–∞–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞."
        )
    else:
        logger.warning(
            "–í–ª–∞—Å–Ω–∏–∫ (ID: %d) —Å–ø—Ä–æ–±—É–≤–∞–≤ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∞–¥–º—ñ–Ω–∞ (ID: %d).",
            owner_id,
            user_id_to_remove,
        )
        await message.answer(
            f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <code>{user_id_to_remove}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–µ–¥ –∞–¥–º—ñ–Ω—ñ–≤ –∞–±–æ —Ü–µ –≤–ª–∞—Å–Ω–∏–∫."
        )

    await state.clear()