from aiogram import F, Router
from aiogram.types import Message

from data.user_settings import (
    update_user_tts_voice,
    update_user_tts_enabled,
    clear_user_context,
    register_user_if_not_exists
)
from utils.logging_setup import get_logger

router = Router()
logger = get_logger(__name__)


@router.message(F.text.startswith("üó£Ô∏è –ì–æ–ª–æ—Å"))
async def change_voice_handler(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–º—ñ–Ω–∏ –≥–æ–ª–æ—Å—É TTS.
    """
    await register_user_if_not_exists(message.from_user)
    user_id = message.from_user.id
    
    new_voice = "male" if message.text == "üó£Ô∏è –ì–æ–ª–æ—Å (–ß–æ–ª–æ–≤—ñ—á–∏–π)" else "female"
    await update_user_tts_voice(user_id, new_voice)

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {user_id}) –∑–º—ñ–Ω–∏–≤ –≥–æ–ª–æ—Å TTS –Ω–∞ {new_voice}.")
    await message.answer(f"–ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {'—á–æ–ª–æ–≤—ñ—á–∏–π' if new_voice == 'male' else '–∂—ñ–Ω–æ—á–∏–π'}.")


@router.message(F.text.startswith(("‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ TTS", "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ TTS")))
async def toggle_tts_handler(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è TTS.
    """
    await register_user_if_not_exists(message.from_user)
    user_id = message.from_user.id
    
    new_status = message.text == "‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏ TTS"
    await update_user_tts_enabled(user_id, new_status)

    status_text = "—É–≤—ñ–º–∫–Ω—É–≤" if new_status else "–≤–∏–º–∫–Ω—É–≤"
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {user_id}) {status_text} TTS.")
    await message.answer(f"TTS {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if new_status else '–≤–∏–º–∫–Ω–µ–Ω–æ'}.")


@router.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç")
async def clear_context_handler(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    """
    await register_user_if_not_exists(message.from_user)
    user_id = message.from_user.id
    
    await clear_user_context(user_id)

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {user_id}) –æ—á–∏—Å—Ç–∏–≤ —ñ—Å—Ç–æ—Ä—ñ—é –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.")
    await message.answer("–Ü—Å—Ç–æ—Ä—ñ—é –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –æ—á–∏—â–µ–Ω–æ.")
