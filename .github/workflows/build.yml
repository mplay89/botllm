# name: Build
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     types: [opened, synchronize, reopened]
# jobs:
#   sonarqube:
#     name: SonarQube
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: SonarQube Scan
#         uses: SonarSource/sonarqube-scan-action@v6
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

name: Docker Build Pipeline

on:
  # Автоматично при пуші у основні гілки
  push:
    branches: [ main ]
  # Або ручний запуск із параметрами
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (dev)"
        required: true
        default: "dev"

jobs:
  setup:
    name: Prepare Docker Builder
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set build variables
        id: vars
        run: |
          echo "tag=v${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "CI_PROJECT_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "CI_PROJECT_URL=${{ github.event.repository.html_url }}" >> $GITHUB_ENV

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [setup]
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      REGISTRY: ${{ secrets.BASE_REGISTRY }}
      REGISTRY_USER: "_"
      REGISTRY_TOKEN: ${{ secrets.BASE_ACCESS_TOKEN }}
      BASE_IMAGE: "python:3.12-slim"
      ENV_SUFFIX: "-${{ github.event.inputs.environment || 'dev' }}"
      IMAGE_NAME: ${{ secrets.BASE_REGISTRY }}/${{ github.event.repository.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_TOKEN }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.tag }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            HUSKY=0
            BASE_IMAGE=${{ env.BASE_IMAGE }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            VERSION=${{ needs.setup.outputs.tag }}
            VCS_REF=${{ github.sha }}
          labels: |
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.setup.outputs.tag }}
            org.opencontainers.image.source=${{ env.CI_PROJECT_URL }}

      - name: Security Scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.tag }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'
